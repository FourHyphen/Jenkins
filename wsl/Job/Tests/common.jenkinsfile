// 前提: Jenkins サーバーの文字コードが SJIS である
// UTF8 に変更する場合、BOM なしにすること(BOM ありだとスクリプトの最初の行が BOM バイト付きで処理され、しかも load でエラーしないので厄介)

def create_script_edited_for_testing(String original_path, String create_path) {
    // テスト用に以下加工を施してUTF-8(BOM なし)で保存
    //  - pipeline ブロックを除く
    //  - return this 付与
    String text = read_file(original_path)
    String contents = exclude_pipeline_block(text)
    contents = add_return_this(contents)
    writeFile(file: create_path, text: contents)

    // sh("cat ${create_path}")

    println("create: ${create_path} ... OK")
}

def read_file(String file_path) {
    // いちいち Scripts not permitted to use に対応するのが面倒なのでスクリプト処理
    // やりたいことは return new File(file_path).getText()
    try {
        // BOM なしで読み込む
        return read_file_linux_without_bom(file_path)
    } catch (Exception e){
        return read_file_windows(file_path)
    }
}

def read_file_linux_without_bom(String file_path) {
    return sh(returnStdout: true, script: "cat ${file_path} | sed -s -e '1s/^\\xef\\xbb\\xbf//'")
}

def read_file_windows(String file_path) {
    return powershell(returnStdout: true, script: "Get-Content ${file_path}")
}

def exclude_pipeline_block(String text) {
    // (?m) -> 複数行マッチモード(^ が改行文字直後の行頭にマッチする)
    // (?s) -> DotAll モード(. が改行文字にもマッチする)
    // 行頭の "pipeline {" から、"}" のみの行まで控え目マッチ(CRLF改行対応として改行文字を "\r?\n" で表現)
    def matching = /(?m)(?s)^pipeline *\{.*?\r?\n\}\r?\n/
    return (text =~ matching)?.replaceAll("")
}

def add_return_this(String contents) {
    // return this が存在しない場合、末尾に return this を追加する
    def ret = contents

    // ==~ 演算子は文字列の全てが正規表現にマッチする場合に初めて true になるので =~ で代替
    if (!(contents =~ /(?m)^return +this\r?\n/)) {
        ret += "\nreturn this\n"
    }

    return ret
}

def load_script(String load_script_path) {
    def script = load(load_script_path)
    println("load: ${load_script_path} ... OK")
    return script
}

def is_true(def actual, String print_if_ng) {
    if (!actual) {
        println("check NG... ${print_if_ng}: expected: true / actual: false")
        return false
    }

    return true
}

def is_false(def actual, String print_if_ng) {
    if (actual) {
        println("check NG... ${print_if_ng}: expected: false / actual: true")
        return false
    }

    return true
}

def are_equals(def expected, def actual) {
    if (expected == actual) {
        return true
    }

    println("check NG...  expected: ${expected} / actual: ${actual}")
    return false
}

def is_contains(def list, def expected) {
    if (list.count { it.contains(expected) } > 0) {
        return true
    }

    println("check NG...  expected: list contains ${expected} / actual: not contains")
    return false
}

def print_result(boolean result, String method_name) {
    String res = result ? "OK" : "NG"
    println("${method_name} ... ${res}")
}

def did_success_all(List results) {
    return results.count(false) == 0
}

def get_current_log(Integer lines_num) {
    // return java.util.ArrayList
    // timestamps {} 内のログの場合、[2022-05-02T05:04:57.200Z] 文字列 のように Timestamp を含むことに注意
    return currentBuild.rawBuild.getLog(lines_num)
}

return this
