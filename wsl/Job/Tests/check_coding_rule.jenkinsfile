g_check_coding_rule_debug = false
g_check_all_result_builder = new StringBuilder()

def is_applied(String jenkinsfile_path, def common_jenkinsfile) {
    try {
        return is_applied_core(jenkinsfile_path, common_jenkinsfile)
    } finally {
        println(g_check_all_result_builder.toString())
    }
}

def is_applied_core(String jenkinsfile_path, def common_jenkinsfile) {
    String text = common_jenkinsfile.read_file(jenkinsfile_path)

    // (?m) -> 複数行マッチモード(^ が改行文字直後の行頭にマッチする)
    // (?s) -> DotAll モード(. が改行文字にもマッチする)
    boolean result = true
    boolean during_string_single_quote = false
    boolean during_string_double_quote = false
    int line_num = 0

    for(String line in text.split("\n")) {
        line_num++

        // ''' や """ で括られている間の行の場合、その括りの終了を確認(規約は見ない)
        if (during_string_single_quote) {
            if (num_of_single_quote_triple(line) == 1) {
                during_string_single_quote = false
                result_append("line ${line_num} : ''' end  : ${line}")
            } else {
                debug_dump("'''      : ${line}")
            }
            continue
        }

        if (during_string_double_quote) {
            if (num_of_single_double_triple(line) == 1) {
                during_string_double_quote = false
                result_append("line ${line_num} : \"\"\" end  : ${line}")
            } else {
                debug_dump("\"\"\"      : ${line}")
            }
            continue
        }

        // コメントのチェック(NG パターンと混在している場合もあるので結果を無視する)
        is_ok_comment(line, line_num)

        int indent_num = get_indent_num(line)
        if (indent_num == 0) {
            // インデントなしなら何らかの定義行
            if (!is_ok_define(line, line_num)) {
                result = false
            }
        } else {
            // インデントチェック(複数行に渡る場合の整形もあるので結果を無視する)
            is_ok_indent_num(line, line_num)

            // 行末に余計なスペースがある場合は NG (インデントのみの行もここで NG とする)
            if (!is_ok_line_tail(line, line_num)) {
                result = false
            }

            // 処理に関する行のチェック
            if (!is_ok_process(line, line_num)) {
                result = false
            }
        }

        // ''' や """ で括り始める行の場合、その括りの終了までチェックしないようフラグ立て
        if (num_of_single_quote_triple(line) == 1) {
            during_string_single_quote = true
            result_append("line ${line_num} : ''' start: ${line}")
        } else if (num_of_double_quote_triple(line) == 1) {
            during_string_double_quote = true
            result_append("line ${line_num} : \"\"\" start: ${line}")
        }
    }

    println("is_applied_core(): return ${result}")
    return result
}

////////////////////////////////////////////////////////////
// チェック結果の管理
////////////////////////////////////////////////////////////
def result_append(String str) {
    g_check_all_result_builder.append("${str}\n")
}

////////////////////////////////////////////////////////////
// ''' や """ で括られた範囲に関する処理
////////////////////////////////////////////////////////////
def num_of_single_quote_triple(String line) {
    def triple_match = /'''/
    return match_num(triple_match, line)
}

def num_of_double_quote_triple(String line) {
    def triple_match = /"""/
    return match_num(triple_match, line)
}

def match_num(def regex, String str) {
    return (str =~ regex).size()
}

def debug_dump(String str) {
    if (g_check_coding_rule_debug) {
        result_append("[DEBUG] ${str}")
    }
}

////////////////////////////////////////////////////////////
// コメント関連
////////////////////////////////////////////////////////////
def is_ok_comment(String line, int line_num) {
    // コメント関連の文字列が存在しないならチェック不要
    if (!line.contains("//") && !line.contains("/*") && !line.contains("*/")) {
        return true
    }

    // "    //" 等、インデント + "//" の行は NG
    boolean result = true
    if (line =~ '^ *//') {
        result_append("[WARN] line ${line_num}: ${line}\n    comment -> /* ... */")
        result = false
    }

    // /* ... */ が 1 行に収まっている場合、半角スペースのチェック
    // ただし "/****" のようなコメントは関数等の定義ヘッダコメントのためこのチェックから除外する
    if (line =~ /\/\*[^*].*\*\/ *?$/) {
        if (!line.contains("/* ") || !line.contains(" */")) {
            result_append("[WARN] line ${line_num}: ${line}\n    comment -> /* ... */")
            result = false
        }
    }

    return result
}

////////////////////////////////////////////////////////////
// インデント関連
////////////////////////////////////////////////////////////
def get_indent_num(String line) {
    def indent_match = /^( )*/
    return (line =~ indent_match)[0][0].length()
}

def is_ok_indent_num(String line, int line_num) {
    int indent_num = get_indent_num(line)
    if (indent_num % 4 != 0) {
        result_append("[WARN] line ${line_num}: ${line}\n    indent.length() = ${indent_num}")
        return false
    }

    return true
}

def is_ok_line_tail(String line, int line_num) {
    // 行末にスペースがある場合は NG
    if (line =~ / +$/) {
        result_append("[ERROR] line ${line_num}: ${line}\n    not space at line tail")
        return false
    }

    return true
}

////////////////////////////////////////////////////////////
// 定義行
////////////////////////////////////////////////////////////
def is_ok_define(String line, int line_num) {
    // クラス定義開始行
    if ((line =~ /^class /)) {
        debug_dump("class: ${line}")
        return is_match_class_format(line, line_num)
    }

    // 関数定義開始行
    if ((line =~ /^def /)) {
        debug_dump("func: ${line}")
        return is_match_func_format(line, line_num)
    }

    // グローバル定数定義行
    if ((line =~ /^[A-Z].+?=/)) {
        debug_dump("global constant: ${line}")
        return is_match_global_constant(line, line_num)
    }

    // グローバル変数定義行
    if ((line =~ /^g.+?=/)) {
        debug_dump("global var: ${line}")
        return is_match_global_variable(line, line_num)
    }

    return true
}

def is_match_class_format(String line, int line_num) {
    // implements / extends あり
    if (line =~ /(implements|extends)/) {
        return is_match_class_format_with_super(line, line_num)
    }

    // 他
    return is_match_class_format_simple(line, line_num)
}

def is_match_class_format_with_super(String line, int line_num) {
    if (!(line =~ /^class [A-Z][^_ ]+ (implements|extends) [A-Za-z0-9_]+ \{$/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    class format -> ^class [A-Z][^_ ]+ (implements|extends) [A-Za-z0-9_]+ {\$")
        return false
    }

    return true
}

def is_match_class_format_simple(String line, int line_num) {
    if (!(line =~ /^class [A-Z][^_ ]+ \{$/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    class format -> ^class [A-Z][^_ ]+ {\$")
        return false
    }

    return true
}

def is_match_func_format(String line, int line_num) {
    boolean result = true
    String match = ""

    // 関数名や小かっこ
    match = "^def [^A-Z ]+\\((\\) \\{|[^ ].*?[^ ](,|\\) \\{))"
    if (!(line =~ match)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    func format -> ${match}")
        result = false
    }

    // 引数が存在しないならチェック終了
    match = /\( ?\)/
    if ((line =~ match)) {
        return result
    }

    // 小かっこ内、引数箇所
    String args = line.substring(line.indexOf("("))
    String reconstruct = ""
    (args =~ "[A-Za-z0-9_]+ [A-Za-z0-9_]+(\\)|, |,|)").each {
        reconstruct += it[0].toString()
    }
    debug_dump("reconstruct: ${reconstruct}")

    if (!line.contains(reconstruct) || reconstruct == "") {
        result_append("[ERROR] line ${line_num}: ${line}\n    func arg format -> type arg_name, type arg_name")
        result = false
    }

    return result
}

def is_match_global_constant(String line, int line_num) {
    if (!(line =~ /^[A-Z][A-Z0-9_]+ += +/) && !(line =~ /^[A-Z][A-Z0-9_]+ +=$/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    global constant format -> ^[A-Z][A-Z0-9_]+ += +")
        return false
    }

    return true
}

def is_match_global_variable(String line, int line_num) {
    if (!(line =~ /^g_[a-z0-9_]+ += +/) && !(line =~ /^g_[a-z0-9_]+ +=$/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    global variable format -> ^g_[a-z0-9_]+ += +")
        return false
    }

    return true
}

////////////////////////////////////////////////////////////
// 処理行
////////////////////////////////////////////////////////////
def is_ok_process(String line, int line_num) {
    // if 行
    if (line =~ /if[ ?\\(]/) {
        debug_dump("if: ${line}")
        return is_match_if_format(line, line_num)
    }

    // if 以外の条件判定行
    if (line.contains("==") || line.contains("!=")) {
        debug_dump("judge(not if): ${line}")
        return is_match_judge_format(line, line_num)
    }

    // 正規表現処理行
    if (line.contains("=~")) {
        debug_dump("regex: ${line}")
        return is_match_regex_format(line, line_num)
    }

    // return
    if (line.contains("return ")) {
        debug_dump("return: ${line}")
        return is_match_return_format(line, line_num)
    }

    // 変数への代入行
    if (line =~ /[a-z0-9_] *=/) {
        debug_dump("var: ${line}")
        return is_match_var_format(line, line_num)
    }

    return true
}

def is_match_if_format(String line, int line_num) {
    boolean result = true
    if (!(line =~ /if \([^ ].*?[^ ]\)/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    if format -> if \\([^ ]")
        result = false
    }

    if (line =~ /\{ *$/) {
        // 1 行の中に { がある場合
        if (!(line =~ /\) \{$/)) {
            result_append("[ERROR] line ${line_num}: ${line}\n    if format -> ) {\$")
            result = false
        }
    } else {
        if (!(line =~ /\) +[A-Za-z]/)) {
            result_append("[ERROR] line ${line_num}: ${line}\n    if format -> ) +[A-Za-z]")
            result = false
        }
    }

    // else if の場合
    if (line =~ /else +if/) {
        if (!(line =~ /\} else if \(/)) {
            result_append("[ERROR] line ${line_num}: ${line}\n    if format -> } else if (")
            result = false
        }
    }

    if (line.contains("==") || line.contains("!=") || line.contains("||") || line.contains("&&")) {
        if (!is_match_judge_format(line, line_num)) {
            result = false
        }
    }

    return result
}

def is_match_judge_format(String line, int line_num) {
    boolean result = true
    if (!(line =~ / [!=]= /)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    judge format -> \" =[!=] \"")
        result = false
    }

    if (line.contains("||") || line.contains("&&")) {
        if (!(line =~ / [|&][|&] /)) {
            result_append("[ERROR] line ${line_num}: ${line}\n    judge format -> \" [|&][|&] \"")
            result = false
        }
    }

    if (line.contains("=~")) {
        if (!is_match_regex_format(line, line_num)) {
            result = false
        }
    }

    return result
}

def is_match_regex_format(String line, int line_num) {
    if (!(line =~ / =~ /)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    regex format -> \" =~ \"")
        return false
    }

    return true
}

def is_match_var_format(String line, int line_num) {
    // 代入値が下の行に記載されている場合
    if (line =~ / =$/) {
        return true
    }

    // 同じ行で代入を完結するならチェック
    if (!(line =~ / = /)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    var format -> \" = \"")
        return false
    }

    return true
}

def is_match_return_format(String line, int line_num) {
    // "return" だけなら OK
    if (line =~ / *return$/) {
        return true
    }

    if (!(line =~ /return [^ ]/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    return format -> return [^ ]")
        return false
    }

    return true
}

return this
