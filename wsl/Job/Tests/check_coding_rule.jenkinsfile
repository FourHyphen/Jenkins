g_check_coding_rule_debug = false
g_check_all_result_builder = new StringBuilder()

def is_applied(String jenkinsfile_path, def common_jenkinsfile) {
    try {
        return is_applied_core(jenkinsfile_path, common_jenkinsfile)
    } finally {
        println(g_check_all_result_builder.toString())
    }
}

def is_applied_core(String jenkinsfile_path, def common_jenkinsfile) {
    String text = common_jenkinsfile.read_file(jenkinsfile_path)
    boolean result = true
    int line_num = 0

    List lines = text.split("\n")
    List skip_line_nums = get_skip_line_nums(lines)

    for(String line in lines) {
        line_num++

        /* コメントのチェック(NG パターンと混在している場合もあるので結果を無視する) */
        is_ok_comment(line, line_num)

        /* インデントチェック(複数行に渡る場合の整形もあるので結果を無視する) */
        int indent_num = get_indent_num(line)
        is_ok_indent_num(line, line_num)

        /* チェックスキップする行なら他には何も見ない */
        if (skip_line_nums.contains(line_num)) {
            debug_dump("skip: line ${line_num}")
            continue
        }

        if (indent_num == 0) {
            /* インデントなしなら何らかの定義行 */
            if (!is_ok_define(line, line_num)) {
                result = false
            }
        } else {
            /* 行末に余計なスペースがある場合は NG (インデントのみの行もここで NG とする) */
            if (!is_ok_line_tail(line, line_num)) {
                result = false
            }

            /* 処理に関する行のチェック */
            if (!is_ok_process(line, line_num)) {
                result = false
            }
        }
    }

    println("is_applied_core(): return ${result}")
    return result
}

/**********************************************************
チェック結果の管理
**********************************************************/
def result_append(String str) {
    g_check_all_result_builder.append("${str}\n")
}

/**********************************************************
スキップ行決定
**********************************************************/
def get_skip_line_nums(List lines) {
    int line_num = 0
    boolean during_string_single_quote = false
    boolean during_string_double_quote = false
    boolean during_comment = false

    List skips = []
    for(String line in lines) {
        line_num++

        if (during_comment) {
            if (line =~ /\*\//) {
                // 行中に "*/" があればスキップ継続を終了
                during_comment = false

                // 行末が "*/" ならこの行もスキップする
                if (line =~ /\*\/ *$/) {
                    skips.add(line_num)
                    continue
                }
            } else {
                /* でなければスキップ継続 */
                skips.add(line_num)
                continue
            }
        }

        if (during_string_single_quote) {
            /* ''' でのスキップ中、スキップ終了判定 */
            if (do_skip_finish(line, "'''", line_num)) {
                during_string_single_quote = false
            } else {
                skips.add(line_num)
            }
            /* いずれにせよこの行はもうスキップ判定しない */
            continue
        }

        if (during_string_double_quote) {
            /* """ でのスキップ中、スキップ終了判定 */
            if (do_skip_finish(line, '"""', line_num)) {
                during_string_double_quote = false
            } else {
                skips.add(line_num)
            }
            /* いずれにせよこの行はもうスキップ判定しない */
            continue
        }

        /* "//" 開始行はこの行だけスキップ */
        if (line =~ "^ *//") {
            skips.add(line_num)
            continue
        }

        // "/*" 開始行
        if (line =~ /^ *\/\*/) {
            if (line =~ /\*\/ *$/) {
                // 同じ行の終わりに "*/" があれば、この行だけスキップ
                skips.add(line_num)
                continue
            } else if (line =~ /\*\//){
                // 行の途中に "*/" があれば、この行は処理の記載があるのでスキップしない
                continue
            } else {
                /* スキップ継続を開始 */
                skips.add(line_num)
                during_comment = true
                continue
            }
        }

        /* ここに到達するならコメント以外でのスキップ要因 */
        /* ''' の行は、同じ行で ''' で閉じていればスキップしない */
        if (do_skip_start(line, "'''", line_num)) {
            during_string_single_quote = true
            continue
        }

        /* """ の行は、同じ行で """ で閉じていればスキップしない */
        if (do_skip_start(line, '"""', line_num)) {
            during_string_double_quote = true
            continue
        }
    }

    return skips
}

def do_skip_start(String line, String skip_str, int line_num) {
    /* スキップ開始文字列が、PG 中で文字列として扱われているならスキップしない */
    /* 文字列の中に埋め込まれている場合 */
    def regex = "\"[^\"]*?${skip_str}"
    if (line =~ regex) {
        return false
    }

    regex = "'[^']*?${skip_str}"
    if (line =~ regex) {
        return false
    }

    /* 正規表現の中に埋め込まれている場合 */
    if (line.contains("/${skip_str}/")) {
        return false
    }

    /* エスケープされている場合 */
    String escaped = escape(skip_str)
    if (line.contains(escaped)) {
        return false
    }

    /* 上記いずれでもなく、かつスキップ開始文字列で開きっぱなしの場合にスキップを開始する */
    if ((match_num(line, skip_str) % 2) == 1) {
        println("skip start ${skip_str}: ${line} ${line_num}")
        return true
    }
}

def escape(String str) {
    StringBuilder sb = new StringBuilder()
    str.each {
        sb.append("\\" + it)
    }
    return sb.toString()
}

def match_num(String str, def regex) {
    return (str =~ regex).size()
}

def debug_dump(String str) {
    if (g_check_coding_rule_debug) {
        result_append("[DEBUG] ${str}")
    }
}

def do_skip_finish(String line, String skip_str, int line_num) {
    if (match_num(line, skip_str) == 1) {
        println("skip finish ${skip_str}: ${line} ${line_num}")
        return true
    }

    return false
}

/**********************************************************
コメント関連
**********************************************************/
def is_ok_comment(String line, int line_num) {
    /* コメント関連の文字列が存在しないならチェック不要 */
    if (!line.contains("//") && !line.contains("/*") && !line.contains("*/")) {
        return true
    }

    /* "    //" 等、インデント + "//" の行は OK */
    if (line =~ '^ *//') {
        return true
    }

    // /* ... */ が 1 行に収まっている場合、半角スペースのチェック
    // ただし "/****" のようなコメントは関数等の定義ヘッダコメントのためこのチェックから除外する
    if (line =~ /\/\*[^*].*\*\/ *?$/) {
        if (!line.contains("/* ") || !line.contains(" */")) {
            result_append("[WARN] line ${line_num}: ${line}\n    comment -> /* ... */")
            return false
        }
    }

    return true
}

/**********************************************************
インデント関連
**********************************************************/
def get_indent_num(String line) {
    def indent_match = /^( )*/
    return (line =~ indent_match)[0][0].length()
}

def is_ok_indent_num(String line, int line_num) {
    int indent_num = get_indent_num(line)
    if (indent_num % 4 != 0) {
        result_append("[WARN] line ${line_num}: ${line}\n    indent.length() = ${indent_num}")
        return false
    }

    return true
}

def is_ok_line_tail(String line, int line_num) {
    /* 行末にスペースがある場合は NG */
    if (line =~ / +$/) {
        result_append("[ERROR] line ${line_num}: ${line}\n    not space at line tail")
        return false
    }

    return true
}

/**********************************************************
定義行
**********************************************************/
def is_ok_define(String line, int line_num) {
    /* クラス定義開始行 */
    if ((line =~ /^class /)) {
        debug_dump("class: ${line}")
        return is_match_class_format(line, line_num)
    }

    /* 関数定義開始行 */
    if ((line =~ /^def /)) {
        debug_dump("func: ${line}")
        return is_match_func_format(line, line_num)
    }

    /* グローバル定数定義行 */
    if ((line =~ /^[A-Z].+?=/)) {
        debug_dump("global constant: ${line}")
        return is_match_global_constant(line, line_num)
    }

    /* グローバル変数定義行 */
    if ((line =~ /^g.+?=/)) {
        debug_dump("global var: ${line}")
        return is_match_global_variable(line, line_num)
    }

    return true
}

def is_match_class_format(String line, int line_num) {
    /* implements / extends あり */
    if (line =~ /(implements|extends)/) {
        return is_match_class_format_with_super(line, line_num)
    }

    /* 他 */
    return is_match_class_format_simple(line, line_num)
}

def is_match_class_format_with_super(String line, int line_num) {
    if (!(line =~ /^class [A-Z][^_ ]+ (implements|extends) [A-Za-z0-9_]+ \{$/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    class format -> ^class [A-Z][^_ ]+ (implements|extends) [A-Za-z0-9_]+ {\$")
        return false
    }

    return true
}

def is_match_class_format_simple(String line, int line_num) {
    if (!(line =~ /^class [A-Z][^_ ]+ \{$/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    class format -> ^class [A-Z][^_ ]+ {\$")
        return false
    }

    return true
}

def is_match_func_format(String line, int line_num) {
    boolean result = true
    String match = ""

    /* 関数名や小かっこ */
    match = "^def [^_ ]+\\((\\) \\{|[^ ].*?[^ ](,|\\) \\{))"
    if (!(line =~ match)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    func format -> ${match}")
        result = false
    }

    /* 引数が存在しないならチェック終了 */
    match = /\( ?\)/
    if ((line =~ match)) {
        return result
    }

    /* 小かっこ内、引数箇所 */
    String args = line.substring(line.indexOf("("))
    String reconstruct = ""
    (args =~ "[A-Za-z0-9]+ [A-Za-z0-9]+(\\)|, |,|)").each {
        reconstruct += it[0].toString()
    }
    debug_dump("reconstruct: ${reconstruct}")

    if (!line.contains(reconstruct) || reconstruct == "") {
        result_append("[ERROR] line ${line_num}: ${line}\n    func arg format -> type argName, type argName")
        result = false
    }

    return result
}

def is_match_global_constant(String line, int line_num) {
    if (!(line =~ /^[A-Z][A-Z0-9_]+ += +/) && !(line =~ /^[A-Z][A-Z0-9_]+ +=$/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    global constant format -> ^[A-Z][A-Z0-9_]+ += +")
        return false
    }

    return true
}

def is_match_global_variable(String line, int line_num) {
    if (!(line =~ /^g_[A-Za-z0-9_]+ += +/) && !(line =~ /^g_[A-Za-z0-9_]+ +=$/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    global variable format -> ^g_[a-z0-9_]+ += +")
        return false
    }

    return true
}

/**********************************************************
処理行
**********************************************************/
def is_ok_process(String line, int line_num) {
    /* if 行 */
    if (line =~ /if[ ?\\(]/) {
        debug_dump("if: ${line}")
        return is_match_if_format(line, line_num)
    }

    /* if 以外の条件判定行 */
    if (line.contains("==") || line.contains("!=")) {
        debug_dump("judge(not if): ${line}")
        return is_match_judge_format(line, line_num)
    }

    /* 正規表現処理行 */
    if (line.contains("=~")) {
        debug_dump("regex: ${line}")
        return is_match_regex_format(line, line_num)
    }

    /* return */
    if (line.contains("return ")) {
        debug_dump("return: ${line}")
        return is_match_return_format(line, line_num)
    }

    /* 変数への代入行 */
    if (line =~ /[a-z0-9_] *=/) {
        debug_dump("var: ${line}")
        return is_match_var_format(line, line_num)
    }

    return true
}

def is_match_if_format(String line, int line_num) {
    boolean result = true
    /* "if (true)" の、"()" の前後の半角スペースの有無確認 */
    if (!(line =~ /if \([^ ].*?[^ ]\)/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    if format -> if \\([^ ]")
        result = false
    }

    if (line =~ /\{ *$/) {
        /* if 行の中に { がある場合、") {" の半角スペース確認 */
        if (!(line =~ /\) \{$/)) {
            result_append("[ERROR] line ${line_num}: ${line}\n    if format -> ) {\$")
            result = false
        }
    } else {
        /* if 行の中に { がない場合、"if (true == true) return true" を想定 */
        /* ") return" のような半角スペースの確認 */
        if (!(line =~ /\) +[A-Za-z]/)) {
            result_append("[ERROR] line ${line_num}: ${line}\n    if format -> ) +[A-Za-z]")
            result = false
        }
    }

    /* else if の場合 */
    if (line =~ /else +if/) {
        /* else if 前後の半角スペースの確認 */
        if (!(line =~ /\} else if \(/)) {
            result_append("[ERROR] line ${line_num}: ${line}\n    if format -> } else if (")
            result = false
        }
    }

    if (line.contains("==") || line.contains("!=") || line.contains("||") || line.contains("&&")) {
        /* 比較演算子のフォーマット確認 */
        if (!is_match_judge_format(line, line_num)) {
            result = false
        }
    }

    return result
}

def is_match_judge_format(String line, int line_num) {
    boolean result = true
    if (line.contains("==") || line.contains("!=")) {
        if (!(line =~ / [!=]= /)) {
            /* == か != の場合の半角スペースの確認 */
            result_append("[ERROR] line ${line_num}: ${line}\n    judge format -> \" =[!=] \"")
            result = false
        }
    }

    if (line.contains("||") || line.contains("&&")) {
        /* || か && の場合の半角スペースの確認 */
        if (!(line =~ / [|&][|&] /)) {
            result_append("[ERROR] line ${line_num}: ${line}\n    judge format -> \" [|&][|&] \"")
            result = false
        }
    }

    if (line.contains("=~")) {
        /* 正規表現の確認 */
        if (!is_match_regex_format(line, line_num)) {
            result = false
        }
    }

    return result
}

def is_match_regex_format(String line, int line_num) {
    if (!(line =~ / =~ /)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    regex format -> \" =~ \"")
        return false
    }

    return true
}

def is_match_var_format(String line, int line_num) {
    /* 代入値が下の行に記載されている場合 */
    if (line =~ / =$/) {
        return true
    }

    /* 同じ行で代入を完結するならチェック */
    if (!(line =~ / = /)) {
        /* return "cmd --arg=value" のように文字列として扱う "=" の場合は確認不要 */
        if (!is_pattern_equal_in_literal(line)) {
            result_append("[ERROR] line ${line_num}: ${line}\n    var format -> \" = \"")
            return false
        }
    }

    return true
}

def is_pattern_equal_in_literal(String str) {
    /* "=" がリテラルの中にあれば true を返す */
    return (str =~ /"[^"=]*=[^"=]*"/) || (str =~ /'[^'=]*=[^'=]*'/)
}

def is_match_return_format(String line, int line_num) {
    /* "return" だけなら OK */
    if (line =~ / *return$/) {
        return true
    }

    if (!(line =~ /return [^ ]/)) {
        result_append("[ERROR] line ${line_num}: ${line}\n    return format -> return [^ ]")
        return false
    }

    return true
}

return this
