def is_applied(String jenkinsfile_path, def common_jenkinsfile) {
    String text = common_jenkinsfile.read_file(jenkinsfile_path)

    // (?m) -> 複数行マッチモード(^ が改行文字直後の行頭にマッチする)
    // (?s) -> DotAll モード(. が改行文字にもマッチする)
    boolean result = true
    int line_num = 0

    for(String line in text.split("\n")) {
        line_num++

        // インデントチェック(複数行に渡る場合の整形もあるので NG にはしない)
        check_indent(line, line_num)

        // クラス定義開始行
        if ((line =~ /^class /)) {
            println("debug: class: ${line}")
            if (!is_match_class_format(line, line_num)) {
                result = false
            }
        }

        // 関数定義開始行
        if ((line =~ /^def /)) {
            println("debug: func: ${line}")
            if (!is_match_func_format(line, line_num)) {
                result = false
            }
        }

        // グローバル定数定義行
        if ((line =~ /^[A-Z].+?=/)) {
            println("debug: global constant: ${line}")
            if (!is_match_global_constant(line, line_num)) {
                result = false
            }
        }
    }

    println("is_applied(): return ${result}")
    return result
}

def check_indent(String line, int line_num) {
    def indent_match = /^( )*/
    if (line[0] == " ") {
        int indent_num = (line =~ indent_match)[0][0].length()
        if (indent_num % 4 != 0) {
            println("warn: line ${line_num}: ${line}\n    indent.length() = ${indent_num}")
        }
    }
}

def is_match_class_format(String line, int line_num) {
    if (!(line =~ /^class [A-Z][^_ ]+ \{$/)) {
        println("warn: line ${line_num}: ${line}\n    class format -> ^class [A-Z][^_ ]+ {\$")
        return false
    }

    return true
}

def is_match_func_format(String line, int line_num) {
    if (!(line =~ /^def [^A-Z]+(.*) \{$/)) {
        println("warn: line ${line_num}: ${line}\n    func format -> ^def [^A-Z]+(.*) {\$")
        return false
    }

    return true
}

def is_match_global_constant(String line, int line_num) {
    if (!(line =~ /^[A-Z][A-Z0-9_]+ += +/) && !(line =~ /^[A-Z][A-Z0-9_]+ +=$/)) {
        println("warn: line ${line_num}: ${line}\n    global constant format -> ^[A-Z][A-Z0-9_]+ += +")
        return false
    }

    return true
}

return this
