import org.codehaus.groovy.runtime.MethodClosure    /* MethodClosure */

// test_target_jenkinsfile -> テスト対象 jenkinsfile の load 結果
// common -> common.jenkinsfile の load 結果
def test_suite(def test_target_jenkinsfile, def common) {
    // "this." は省略不可
    List tests = [this.&check_skip_lines,
                  this.&check_comment,
                  this.&check_indent,
                  this.&check_line_tail,
                  this.&check_define_class,
                  this.&check_define_global_constant,
                  this.&check_define_global_variable,
                  this.&check_define_func,
                  this.&check_process_judge,
                  this.&check_process_if,
                  this.&check_process_return,
                  this.&check_process_var
                  ]

    // テスト実施
    StringBuilder sb = new StringBuilder()
    List results = tests.collect {
        boolean result = it(test_target_jenkinsfile, common, sb)
        sb.append(common.get_result_str(result, it.getMethod()) + "\n\n")
        return result
    }

    // 結果確認
    boolean did_success_all = common.did_success_all(results)

    // 結果整理
    sb.append("------------\n")
    sb.append("OK: ${results.count(true)} / NG: ${results.count(false)}\n")
    did_success_all ? sb.append("test ... OK") : sb.append("test ... NG!")

    // 結果表示
    println(sb.toString())

    return did_success_all
}

def check_skip_lines(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    List test = []
    test.add("g_not_skip = null")                       //  1行目
    test.add("// g_skip = null")                        //  2
    test.add("g_not_skip = null // not_skip")           //  3
    test.add("/* g_skip = null */")                     //  4
    test.add("g_not_skip = /* not skip */ null")        //  5
    test.add("g_not_skip = null /* not skip */")        //  6
    test.add("/* not skip */ g_not_skip = null")        //  7
    test.add("/*")                                      //  8
    test.add("g_skip = null")                           //  9
    test.add("*/")                                      // 10
    test.add("/* g_skip = null")                        // 11
    test.add("*/")                                      // 12
    test.add("    ")                                    // 13    インデントのみの行はスキップしない
    test.add("")                                        // 14    何もない行はスキップしない
    test.add("g_not_skip = \"\"\"some string\"\"\"")    // 15
    test.add("g_not_skip = \"\"\" ")                    // 16
    test.add("skip")                                    // 17
    test.add("    \"\"\"")                              // 18
    test.add("g_not_skip = '''some string'''")          // 19
    test.add("g_not_skip = ''' ")                       // 20
    test.add("skip")                                    // 21
    test.add("    '''")                                 // 22
    test.add("if (match_num(line, /'''/) == 1) {")      // 23    文字列としての'''はスキップしない
    test.add("    return true")                         // 24
    test.add("// g_skip = null")                        // 25    スキップ判定が生きてるかの確認
    test.add("println(\"a'''\")")                       // 26    文字列としての'''はスキップしない
    test.add("return true")                             // 27
    test.add('if (match_num(line, /"""/) == 1) {')      // 28    文字列としての"""はスキップしない
    test.add("    return true")                         // 29
    test.add("// g_skip = null")                        // 30    スキップ判定が生きてるかの確認
    test.add("if (match_num(line, /\"\"\"/) == 1) {")   // 31    \"\"\"はスキップしない
    test.add("    return true")                         // 32
    test.add("println(\"a \\\"\\\"\\\")")               // 33    \"\"\"はスキップしない
    test.add("return true")                             // 34

    List expected = [2, 4, 8, 9, 10, 11, 12, 17, 21, 25, 30]
    List skips = jenkinsfile.get_skip_line_nums(test)

    if (!common.are_equals(expected, skips, "", sb)) {
        result = false
    }

    return result
}

def check_comment(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    // OK パターン
    List oks = ["    /* OK */",
                "    /*",
                "    */",
                "/* OK */",
                "/*",
                "*/"
               ]
    if (!check_ok_pattern(jenkinsfile.&is_ok_comment, oks, common, sb)) {
        result = false
    }

    // NG パターン
    List ngs = ["    // ",          // "//" は NG
                "    /*NG */",      // 半角スペースない
                "    /* NG*/",      // 半角スペースない
                "//",
                "/*NG */",
                "/* NG*/"
               ]
    if (!check_ng_pattern(jenkinsfile.&is_ok_comment, ngs, common, sb)) {
        result = false
    }

    // 本当はチェックしたいが無視するパターン
    // /****                              : 何らかの定義のヘッダコメントを想定、チェックしない
    // String var_ng3 = ""    // コメント : 行末らへんの // は諦める

    return result
}

def check_indent(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    // OK パターン
    List oks = ["    int indent = 0",       // 4 の倍数
                "        int indent = 0"    // 4 の倍数
               ]
    if (!check_ok_pattern(jenkinsfile.&is_ok_indent_num, oks, common, sb)) {
        result = false
    }

    // NG パターン
    List ngs = ["     int indent_ng1 = 0",    // 4 の倍数でない
                "   int indent_ng2 = 0"       // 4 の倍数でない
               ]
    if (!check_ng_pattern(jenkinsfile.&is_ok_indent_num, ngs, common, sb)) {
        result = false
    }

    // 本当はチェックしたいが無視するパターン
    // "int n = 0" : ローカル変数ならインデント一切ないのは NG だがチェック不可

    return result
}

def check_line_tail(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    // OK パターン
    List oks = ["    int indent = 0",       // 行末に " " がなければ OK
                "    }"
               ]
    if (!check_ok_pattern(jenkinsfile.&is_ok_line_tail, oks, common, sb)) {
        result = false
    }

    // NG パターン
    List ngs = ["    /* NG */ ",                         // 行末に " " がある
                "    String line_tail_ng = \"\"    ",    // 〃
                "    }    "                              // 〃
               ]
    if (!check_ng_pattern(jenkinsfile.&is_ok_line_tail, ngs, common, sb)) {
        result = false
    }

    return result
}

def check_define_class(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    // OK パターン
    List oks = ["class ClassDefineOK1 {",
                "class ClassDefineOK2 implements Cloneable {"
               ]
    if (!check_ok_pattern(jenkinsfile.&is_match_class_format, oks, common, sb)) {
        result = false
    }

    // NG パターン
    List ngs = ["class class_define_ng1 {",                        // クラス名は UpperCamelCase
                "class ClassDefineNG2{",                           // 半角スペースない
                "class ClassDefineNG3  {",                         // 半角スペース多すぎ
                "class ClassDefineNG4 extends  Cloneable {",       // 半角スペース多すぎ
                "class ClassDefineNG5 implements Cloneable{"       // 半角スペースない
               ]
    if (!check_ng_pattern(jenkinsfile.&is_match_class_format, ngs, common, sb)) {
        result = false
    }

    return result
}

def check_define_global_constant(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    // OK パターン
    List oks = ["GLOBAL_CONSTANT_OK1 =",
                "GLOBAL_CONSTANT_OK2   =   null"
               ]
    if (!check_ok_pattern(jenkinsfile.&is_match_global_constant, oks, common, sb)) {
        result = false
    }

    // NG パターン
    List ngs = ["GLOBAL_CONSTANT_ng1 = null",    // 小文字使用
                "GLOBAL_CONSTANT_NG2= null",     // 半角スペースない
                "GLOBAL_CONSTANT_NG3 =null"      // 半角スペースない
               ]
    if (!check_ng_pattern(jenkinsfile.&is_match_global_constant, ngs, common, sb)) {
        result = false
    }

    return result
}

def check_define_global_variable(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    // OK パターン
    List oks = ["g_value = null",
                "g_value  =  null",    // 縦に合わせる場合があるので半角スペースが 1 つでも入ってれば OK
                "g_value  ="           // 次の行に初期値記載の場合
               ]
    if (!check_ok_pattern(jenkinsfile.&is_match_global_variable, oks, common, sb)) {
        result = false
    }

    // NG パターン
    List ngs = ["g_valuE = null",    // 大文字使用
                "g_value= null",     // 半角スペースない
                "g_value =null"      // 半角スペースない
               ]
    if (!check_ng_pattern(jenkinsfile.&is_match_global_variable, ngs, common, sb)) {
        result = false
    }

    return result
}

def check_define_func(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    // OK パターン
    List oks = ["def func_define_ok1() {",
                "def func_define_ok2(int arg) {",
                "def func_define_ok3(int arg1, String arg2) {",
                "def func_define_ok4(int arg1,"
               ]
    if (!check_ok_pattern(jenkinsfile.&is_match_func_format, oks, common, sb)) {
        result = false
    }

    // NG パターン
    List ngs = ["def func_define_ng1( ) {",                      // 半角スペース余計
                "def func_define_ng2(){",                        // 半角スペースない
                "def func_define_ng3( int arg1) {",              // 半角スペース余計
                "def func_define_ng4(int arg1,  int arg2) {",    // 半角スペース余計
                "def func_define_ng5(int  arg) {"                // 半角スペース余計
               ]
    if (!check_ng_pattern(jenkinsfile.&is_match_func_format, ngs, common, sb)) {
        result = false
    }

    return result
}

def check_process_judge(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    // OK パターン
    List oks = ["    true == true",
                "    (true != false)",
                "    true == true && true == true",
                "    (true == true) || (true == true)",
                "    (true || true)",
                "    (true && true)"
               ]
    if (!check_ok_pattern(jenkinsfile.&is_match_judge_format, oks, common, sb)) {
        result = false
    }

    // NG パターン
    List ngs = ["    false== false",                          // 半角スペース不足
                "    false ==false",                          // 半角スペース不足
                "    false!= false",                          // 半角スペース不足
                "    false !=false",                          // 半角スペース不足
                "    false == false&& false == false",        // 半角スペース不足
                "    (false == false) &&(false == false)",    // 半角スペース不足
                "    (false == false)|| (false == false)",    // 半角スペース不足
                "    false == false ||false == false",        // 半角スペース不足
                "    false|| false",                          // 半角スペース不足
                "    false ||false",                          // 半角スペース不足
                "    false&& false",                          // 半角スペース不足
                "    false &&false"                           // 半角スペース不足
               ]
    if (!check_ng_pattern(jenkinsfile.&is_match_judge_format, ngs, common, sb)) {
        result = false
    }

    return result
}

def check_process_if(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    // 注意: ここでは "} else {" はチェックしない、あくまで if 宣言行のみのチェック
    // OK パターン
    List oks = ["    if (true == true) {",
                "    } else if (true != false) {",
                "    if (bool) {",
                "    if (true == true)         return true",    // このように縦を合わせる場合もありえるので半角スペース複数は OK
                "    } else if (true != false) return true",
                "    if (bool) return true"
               ]
    if (!check_ok_pattern(jenkinsfile.&is_match_if_format, oks, common, sb)) {
        result = false
    }

    // NG パターン
    List ngs = ["    if  (false == false) {",         // 半角スペース余計
                "    if(false == false) {",           // 半角スペース不足
                "    if (false == false)  {",         // 半角スペース余計
                "    }else if (false == false) {",    // 半角スペース不足
                "    } else  if (false == false) {",  // 半角スペース余計
                "    else if (false == false) {",     // } だけで 1 行になってる
                "    if ( bool) {",                   // 半角スペース余計
                "    if (bool ) {",                   // 半角スペース余計
                "    if (bool){",                     // 半角スペース不足
                "    if (bool)  {",                   // 半角スペース余計
                "    if (false == false)return"       // 半角スペース不足
               ]
    if (!check_ng_pattern(jenkinsfile.&is_match_if_format, ngs, common, sb)) {
        result = false
    }

    return result
}

def check_process_return(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    // OK パターン
    List oks = ["    return true",
                "return this",
                "    return"          // return だけは OK
               ]
    if (!check_ok_pattern(jenkinsfile.&is_match_return_format, oks, common, sb)) {
        result = false
    }

    // NG パターン
    List ngs = ["return  false"    // 半角スペース余計
               ]
    if (!check_ng_pattern(jenkinsfile.&is_match_return_format, ngs, common, sb)) {
        result = false
    }

    return result
}

def check_process_var(def jenkinsfile, def common, StringBuilder sb) {
    boolean result = true

    // OK パターン
    List oks = ["    String value = \"tmp\"",
                "    String value =    \"tmp\"",     // 縦を合わせる場合あり
                "    String value =",                // 次の行にまたがる場合
                "    value = null",                  // ローカル変数への代入
                "    g_value = 1",                   // グローバル変数への代入
                "    g_value =",                     // 次の行にまたがる場合
                "    return \"cmd --arg=value\"",    // 文字列として扱う "=" であれば確認不要
                "    return 'cmd --arg=value'"       // 文字列として扱う "=" であれば確認不要
               ]
    if (!check_ok_pattern(jenkinsfile.&is_match_var_format, oks, common, sb)) {
        result = false
    }

    // NG パターン
    List ngs = ["    String value= null",    // 半角スペース不足
                "    String value =null",    // 半角スペース不足
                "    value= null",           // 半角スペース不足
                "    value =null",           // 半角スペース不足
                "    g_value =null",         // 半角スペース不足
                "    g_value= null"          // 半角スペース不足
               ]
    if (!check_ng_pattern(jenkinsfile.&is_match_var_format, ngs, common, sb)) {
        result = false
    }

    // 本当はチェックしたいが無視するパターン
    // "    value= null"    // ローカル変数への代入チェックはパターンいろいろで厳しい？

    return result
}

def check_ok_pattern(MethodClosure test_func, List oks, def common, StringBuilder sb) {
    // MethodClosure を使うと以下警告が出るが、狙い通りの関数が catching されてれば OK
    // expected to call org.codehaus.groovy.runtime.MethodClosure.call but wound up catching Script3.check_comment; see: https://jenkins.io/redirect/pipeline-cps-method-mismatches/
    //
    // 意訳(多分)
    //  -> MethodClosure.call() は CPS 変換されるが、MethodClosure.call() は内部的に非 CPS なので挙動に齟齬が発生、
    //     仕様としてクロージャの最初の戻り値が返ることになる
    List results = oks.collect {
        common.is_true(test_func(it, 1), it, sb)
    }

    return common.did_success_all(results)
}

def check_ng_pattern(MethodClosure test_func, List ngs, def common, StringBuilder sb) {
    List results = ngs.collect {
        common.is_false(test_func(it, 1), it, sb)
    }

    return common.did_success_all(results)
}

return this
