pipeline {
    agent any

    stages {
        stage('execute sh file') {
            steps {
                timestamps {
                    script {
                        // execute_sh_file1()
                        echo "execute_sh_file1()"
                    }
                }
            }
        }

        stage('stage execute') {
            steps {
                timestamps {
                    script {
                        stage_execute()
                    }
                }
            }
        }

        stage('stage test') {
            steps {
                timestamps {
                    script {
                        stage_test()
                    }
                }
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}

////////////////////////////////////////////////////////////////////////////////
// execute_sh_file1
// withCredentials の中にある Credential 情報は何があっても隠してくれるらしい
////////////////////////////////////////////////////////////////////////////////
def execute_sh_file1() {
    String file_name = "execute_sh_file1.sh"
    String str_out_of_with_credentials = ""

    withCredentials([
        [$class: 'UsernamePasswordMultiBinding', credentialsId: 'test', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']
        ]) {
        String str = create_sh_str1(USERNAME, PASSWORD, "str3 is not credential")
        println("execute_sh_file1(): 見せたくないもの含む str:")
        println(str)    // **** で隠れた

        println("execute_sh_file1(): 見せたくないもの含む str を println ではなく echo でどうか:")
        echo(str)    // echo でも **** で隠れた

        writeFile(file: file_name, text: str)
        println("execute_sh_file1(): 見せたくないもの含むファイルの cat(in withCredentials):")
        sh(script: "cat ${file_name}")    // **** で隠れた

        println("execute_sh_file1(): 見せたくないもの含むファイルの実行(in withCredentials):")
        sh(script: "sh ${file_name}")    // **** で隠れた！

        // withCredentials の外に定義した変数に Credential 入れても withCredentials の中なら OK
        str_out_of_with_credentials = create_sh_str1(USERNAME, PASSWORD, "str3 is not credential")
        println("execute_sh_file1(): 見せたくないもの含む str_out_of_with_credentials(in withCredentials):")
        println(str_out_of_with_credentials)    // **** で隠れた
    }

    println("execute_sh_file1(): 見せたくないもの含むファイルの cat(out of withCredentials):")
    sh(script: "cat ${file_name}")    // ★ここは隠れなかった
}

def create_sh_str1(String str1, String str2, String str3) {
    println("create_sh_str1(): 見せたくないもの str1: ${str1}")    // **** で隠れた
    println("create_sh_str1(): 見せたくないもの str2: ${str2}")    // **** で隠れた
    println("create_sh_str1(): 見せてよいもの   str3: ${str3}")    // 当然隠れなかった

    // 上位で withCredentials 定義値なら隠れた
    // 上位での文字列 println でも sh ファイル cat でも sh 実行でも隠れた
    String str_question = create_sh_str1_inner(str1)

    // echo "create_sh_str1(): in bash: 見せたくないもの str1: ****"
    return """#!/bin/bash

echo "create_sh_str1(): in bash: 見せたくないもの str1: ${str1}"
echo "create_sh_str1(): in bash: 見せたくないもの str2: ${str2}"
echo "create_sh_str1(): in bash: 見せてよいもの   str3: ${str3}"

${str_question}

echo "test"
"""
}

def create_sh_str1_inner(String str) {
    return """
echo "create_sh_str1_inner(): inbash: 見せたくないもの str: ${str}"
    """
}

////////////////////////////////////////////////////////////////////////////////
// stage_execute -> 1 の実験結果を受けて、以下をやりたい
//     クレデンシャル情報を使った bash 文字列を作りたい
//     この bash 文字列内のクレデンシャル情報は極力隠したい
//     bash の中身の文法を簡単に確認したい
//     テストコードから bash 文字列作成関数を呼び出したい
////////////////////////////////////////////////////////////////////////////////
def stage_execute() {
    // 上記を満たすにはどうするか？
    // 間違いないのは、withCredentials 中で bash 文字列作って実行まで完結させること
    withCredentials([
        [$class: 'UsernamePasswordMultiBinding', credentialsId: 'test', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']
        ]) {
        String file_name = "exec.sh"

        // (1) bash の中身の文法を簡単に確認するには？
        //  -> Credentials 定義値は **** に変わる
        //  -> Credentials 定義値に " とか ' がない前提でこの文字列をそのままチェックにかけれる
        // (2) bash の中身の一部を自動テストするには？

        // コマンド作る
        String str = create_command_execute(USERNAME, PASSWORD)

        // sh ファイル作る
        writeFile(file: file_name, text: str)

        // デバッグ用: sh ファイルの中身
        println("sh ファイル cat ---------------------------------------------------------------")
        sh(script: "cat ${file_name}")
        println("sh ファイル cat ここまで---------------------------------------------------------------")

        // 実行
        println("sh 実行 ---------------------------------------------------------------")
        int status = sh(returnStatus: true, script: "bash ${file_name}")
        println("sh 実行ここまで ---------------------------------------------------------------")
        println("status: ${status}")
    }
}

def create_command_execute(String str1, String str2) {
    String command1 = create_command1(str1, str2)
    String command2 = create_command_want_to_test()

    return """#!/bin/bash
${command1}

${command2}
"""
}

def create_command1(String str1, String str2) {
    return """
echo "create_command1(): in bash: 見せたくないもの str1: ${str1}"
echo "create_command1(): in bash: 見せたくないもの str2: ${str2}"
"""
}

// 自動テストしたい bash コマンド文字列を作る関数とする
def create_command_want_to_test() {
    // 今のディレクトリに exec.sh があれば正常終了、なければ異常終了する
    return """
ls -l
if [ -f "exec.sh" ] ; then
    echo "OK"
    exit 0
else
    echo "NG"
    exit 1
fi
"""
}

////////////////////////////////////////////////////////////////////////////////
// 自動テストできるかの確認
////////////////////////////////////////////////////////////////////////////////
def stage_test() {
    deleteDir()

    boolean result = true
    String command = create_command_want_to_test()

    // ない場合の異常終了を確認
    int status = sh(returnStatus: true, script: command)
    if (status == 1) {    // ここを == 0 にしたらちゃんと false 側通って test failed になった
        println("create_command_want_to_test(): OK")
    } else {
        println("create_command_want_to_test(): NG. should return 1, but return ${status}.")
        result = false
    }

    if (!result) {
        error("test failed")
    }
}
